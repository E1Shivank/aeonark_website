# ULTRA-FAST Docker build for Aeonark Labs website
# Build time: 1-3 minutes instead of 30 minutes
# Use this if the main Dockerfile is still slow

FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./

# Fast npm install with optimizations
RUN npm ci --include=dev \
    --prefer-offline \
    --no-audit \
    --no-fund \
    --cache /tmp/.npm \
    --registry https://registry.npmjs.org/ && \
    rm -rf /tmp/.npm

# Copy ONLY source files needed for build
COPY client/src ./client/src
COPY client/index.html ./client/index.html
COPY server ./server
COPY shared ./shared
COPY attached_assets ./attached_assets
COPY vite.config.ts tsconfig.json tailwind.config.ts postcss.config.js ./

# Build
RUN npm run build

# Production stage
FROM node:20-alpine AS production

WORKDIR /app

# Install wget for health checks
RUN apk add --no-cache wget

# Copy package files and install prod deps
COPY package*.json ./
RUN npm ci --omit=dev \
    --prefer-offline \
    --no-audit \
    --no-fund \
    --cache /tmp/.npm && \
    rm -rf /tmp/.npm ~/.npm

# Copy built files
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/shared ./shared
COPY --from=builder /app/attached_assets ./attached_assets

# Security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:5000/api/health || exit 1

CMD ["node", "dist/index.js"]